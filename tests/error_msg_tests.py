from dcp_parser.parser import Parser
from dcp_parser.expression.curvature import Curvature
from dcp_parser.expression.sign import Sign
from dcp_parser.expression.expression import *
from nose.tools import assert_equals

class TestErrorMsg(object):
      """ Tests for DCP violation error messages. """
      @classmethod
      def setup_class(self):
          self.aff_exp = Expression(Curvature.AFFINE, Sign.UNKNOWN, 'aff_exp')
          self.cvx_exp = Expression(Curvature.CONVEX, Sign.UNKNOWN, 'convex_exp')
          self.conc_exp = Expression(Curvature.CONCAVE, Sign.UNKNOWN, 'conc_exp')
          self.noncvx_exp = Expression(Curvature.NONCONVEX, Sign.UNKNOWN, 'noncvx_exp')

          self.dcp_violation = "Disciplined convex programming violation:\n"

      # Test error messages generated by expressions (no atoms)
      def test_expressions(self):
          exp = self.aff_exp*self.aff_exp


      # Test parser with numeric constants
      def test_constants_eval(self):
          self.parser.parse('variable x y z')
          self.parser.parse('parameter negative a b')
          expression = '-2 * b + 0 * (z * x - 5) + -a / 1.5'
          self.parser.parse(expression)

          result = self.parser.expressions[0]
          assert_equals(expression, str(result))
          assert_equals(result.curvature, Curvature.CONSTANT)
          assert_equals(result.sign, Sign.POSITIVE)

      # Test parser with atoms
      def test_atoms_eval(self):
          self.parser.parse('variable u v')
          self.parser.parse('parameter positive c d')
          expression = 'c * square(square(u)) - log(v) - (-c * log_sum_exp(d, u, v) - max(u, c))'
          self.parser.parse(expression)

          result = self.parser.expressions[0]
          assert_equals(expression, str(result))
          assert_equals(result.curvature, Curvature.CONVEX)
          assert_equals(result.sign, Sign.UNKNOWN)

          expression = '-square(square(u)) - max(square(v), c)'
          self.parser.parse(expression)
          result = self.parser.expressions[1]
          assert_equals(expression, str(result))
          assert_equals(result.curvature, Curvature.CONCAVE)
          assert_equals(result.sign, Sign.NEGATIVE)

          expression = 'c * square(log(u)) + max(c, log_sum_exp(max(u, v), c))'
          self.parser.parse(expression)
          result = self.parser.expressions[2]
          assert_equals(expression, str(result))
          assert_equals(result.curvature, Curvature.NONCONVEX)
          assert_equals(result.sign, Sign.POSITIVE)