from dcp_parser.parser import Parser
from dcp_parser.expression.curvature import Curvature
from dcp_parser.expression.sign import Sign
from dcp_parser.expression.expression import *
import dcp_parser.atomic.atom_loader as atom_loader
from nose.tools import assert_equals

class TestErrorMsg(object):
      """ Tests for DCP violation error messages. """
      @classmethod
      def setup_class(self):
          self.const_exp = Expression(Curvature.CONSTANT, Sign.UNKNOWN, 'const_exp')
          self.aff_exp = Expression(Curvature.AFFINE, Sign.UNKNOWN, 'aff_exp')
          self.cvx_exp = Expression(Curvature.CONVEX, Sign.UNKNOWN, 'convex_exp')
          self.conc_exp = Expression(Curvature.CONCAVE, Sign.UNKNOWN, 'conc_exp')
          self.noncvx_exp = Expression(Curvature.NONCONVEX, Sign.UNKNOWN, 'noncvx_exp')

          self.dcp_violation = "Disciplined convex programming violation:\n"

      # Test error messages generated by arithmetic operations
      def test_operations(self):
          exp = self.cvx_exp - self.conc_exp
          assert_equals(len(exp.errors),0)

          exp = self.aff_exp*self.aff_exp
          error_str = "Illegal operation: affine * affine"
          assert_equals(len(exp.errors),1)
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)
          assert(not exp.errors[0].is_indexed())

          exp = self.cvx_exp + self.conc_exp
          error_str = "Illegal operation: convex + concave"
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)

          exp = self.conc_exp / self.const_exp
          error_str = "Illegal operation: concave / constant with unknown sign"
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)

          exp = self.noncvx_exp + self.const_exp
          error_str = "Illegal operation: non-convex + constant"
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)

      # Test error messages generated by compositions
      def test_compositions(self):
          atom_dict = atom_loader.generate_atom_dict()
          square = atom_dict['square']
          log_sum_exp = atom_dict['log_sum_exp']

          exp = square(self.aff_exp)
          assert_equals(len(exp.errors),0)

          exp = square(self.cvx_exp)
          error_str = "Illegal composition: convex non-monotonic with convex argument"
          assert_equals(len(exp.errors),1)
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)
          assert(exp.errors[0].is_indexed())

          exp = log_sum_exp(self.cvx_exp, self.aff_exp, self.const_exp)
          assert_equals(len(exp.errors),0)

          exp = log_sum_exp(self.conc_exp, self.noncvx_exp, self.cvx_exp)
          assert_equals(len(exp.errors),2)
          error_str = "Illegal composition: convex non-decreasing with concave argument"
          assert_equals(str(exp.errors[0]),self.dcp_violation + error_str)
          assert_equals(exp.errors[0].index,0)

          error_str = "Illegal composition: convex non-decreasing with non-convex argument"
          assert_equals(str(exp.errors[1]),self.dcp_violation + error_str)
          assert_equals(exp.errors[1].index,1)